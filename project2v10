#include <iostream>
#include <vector>
#include <queue>
#include <cmath>
#include <ctime>
#include <algorithm>
#include <map>
#include <utility>
#include <string>
#include <time.h>
#include <iomanip>
#include <fstream>
#include <sstream>
#include <limits>

using namespace std;



//Just a search function for the data and the features to give an easier visualization of both of them
void featuresearch(vector<vector<float> > data, int features){
    for (int i = 0 ; i < data.size(); i++){ 
        for (int j = 0; j < features; j++){   
            cout << data.at(i).at(j) << " ";     
        }
        cout << endl;   
    }
    cout << "-----------------------------" << endl;
}


//printing out the values of the class
void printfloat(vector<float> a){
        for (int i = 0; i < a.size(); i++){
            cout << a.at(i) << endl;
        }
}

//pushing back the correct values of 100% accuracy and pushing them back to a vector.
//we will compare this vector with the vector gained from euclidean class values and see how many are correct
vector<float>correct(vector<vector<float> > f){
    vector<float> b;
    for (int i = 0; i < f.size(); i++){
        b.push_back(f.at(i).at(0));
    }
    return b;
}

//compare function to check if the class descriptions match
double comp (vector<float>first,vector<float>second){
    double v;

    for(int i = 0; i < first.size(); i++){
        if (first.at(i) == second.at(i)){
            v = v + 1;
            cout << "v = " << v << endl;
        }
    }
    
    return v;
}

//nearest neighbor algorithm to calculate the euclidean distance
//I also made it return the class desc and make the vector as well
//it will compare the vectors and return the best feature and highest accuracy
//
pair<vector<int>,double > nn(vector<vector<float> > data, int features,vector<float>correct,vector<int>featureset,vector<int>best,double highest){
    
    vector<float>check;
  
    float val = 0; //nearest neighbor distance     
    val = numeric_limits<float>::infinity();
    float euclidean;     

 
    int i = 1;
    int arr = 0;

    int last = 0;
    

    //while (last < data.size()){

    double currhighestval = 0;
    double ratechecker = 0;
    int highclassval = 0;

    while (i <= features){


        if(find(featureset.begin(), featureset.end(),i) != featureset.end()){
      
            i++;
        }
        
        else{
       
        check.clear();
        //cout << "data.size() " << data.size() << endl;
        for (int loop = 0; loop < data.size(); loop++){
        
        euclidean = 0;

        float temp = data.at(loop).at(i);

        //cout << "temp " << temp << endl;

        int spot = 0;
        int featurespot = 0;
        int positionfound = 0;
            while(spot < data.size()){
                euclidean = 0;

                float value = data.at(spot).at(i);

               // cout << "loop counter " << loop << endl;
                //cout << "value " << value << endl;
               // cout << "arr val " << arr << endl;
               if (value == temp){
                //cout << "same values" << endl;
               }
               else{
                euclidean = euclidean + pow(data.at(spot).at(i) - temp,2);
         //       cout << "euclidean value = " << euclidean << endl;
                //cout << "spot = " << spot << endl;
                if(euclidean < val && value != temp){
                val = euclidean;
                positionfound = spot;
                
                //cout << "position val loop = " << positionfound << endl;
                //cout << "inner val = " << val << endl;
                
            }
               }
                arr++;
                spot++;
               
        }
        
      //  cout << "curr val = " << val << endl;
      //  cout << "position val = " << positionfound << endl;
        float classdesc;
        classdesc = data.at(positionfound).at(0);
        
      //  cout << "classdesc = " << classdesc << endl;
        check.push_back(classdesc);
        float compare = val; 
        //cout << "value to compare = " << compare << endl;
        arr = 0;
        //featureline++;
        val = numeric_limits<float>::infinity();
       
        //rate = static_cast<double>(accuracy);
        //rate = comp (check,data);
        
       // rate = (rate * 100)/data.at(0).size() ;

//        cout << "rate = " << rate << endl;

    }

    double rate = 0;
    // for (int a = 0; a < check.size(); a++){
    //         cout << check.at(a) << " ";
    //     }
    //     cout << endl;

    // for (int a = 0; a < correct.size(); a++){
    //         cout << correct.at(a) << " ";
    //     }
    //     cout << endl;

    double v = 0;

    //check contains how many are right
    //cout << check.size() << endl;
    for(int b = 0; b < correct.size(); b++){
        if (correct.at(b) == check.at(b)){
            v = v + 1;
            //cout << "v = " << v << endl;
        }
    }

    // cout << v << endl;
    // cout << "check " << check.size() << endl;
    // cout << "correct " << correct.size() << endl;
    //rate = v / ;
       // cout << "rate " << rate << endl;
        //rate = comp(correct,check);
    //cout << data.size();
    //rate = v/data.size();

    rate = v/data.size();
    rate = rate*100;
    cout << "rate = " << rate  << "%"<< endl;
    

    if(ratechecker <= rate){
        ratechecker = rate;
        highclassval = i;
    }
   // cout << "feature " << highclassval << endl;

    cout << "====================================================" << endl;
    //ccout << "here" << endl;
    i++;
    
    //cout << "here" << endl;
        }
    }
     //   cout << "highclassval " << highclassval << endl;
        if(find(featureset.begin(), featureset.end(),highclassval) != featureset.end()){
      //      cout << "feature already exists in the set of values" << endl;
        }
        else{
            featureset.push_back(highclassval);
            for (int y = 0; y < featureset.size(); y++)
            cout << featureset.at(y) << " ";

            cout << endl;
        }
        //last++;

   // }

     if(highest > ratechecker){
         cout << "accuracy lowered" << endl;
     }

     else{
        highest = ratechecker;
    return make_pair(featureset,highest);
    }
   // cout << "here" << endl;

    return make_pair(featureset,highest);

}   





//we will use kfold cross validation to calculate the accuracy of our data
//I do most of the feature calculation in this function
void kfold_cross_validation(vector<vector<float> > data, int feats,vector<float> correct,int input){

        //float accuracy = 0;
        double rate;
        float check = 0;
        vector<int> bestset;
        vector<int>currset;
        double accuracy = 0;
        double top = 0;
        pair<vector<int>,double > temp;
        
        if(input == 1){
            int a = 0;
            while (a < feats){
              temp = nn(data,feats,correct,currset,bestset,accuracy);
              currset = temp.first;
              accuracy = temp.second;

              if (top < accuracy){
                top = accuracy;
                bestset = currset;
              }


              vector<int> t = currset;
              //cout << t.at(0) << "h " << endl;
              
              cout << "----------------------------------------------" << endl;
            a++;
            }
            for (int i = 0; i < bestset.size(); i++){
                cout << "best feature subset is " << bestset.at(i) << " " << endl;
            }
            cout << "best accuracy = " << top << endl;
        }

        // else if (input == 2){
        //     int b = 0;
        //     int spot = 1;
        //     while(b < feats){
        //         temp = bn(data,feats,correct,currset,bestset,accuracy,spot);
        //         b++;
        //         spot++;
        //         cout << "----------------------------------------------" << endl;
        //     }
        // }
        //     temp.push_back(check);
        
        
        // //rate = static_cast<double>(accuracy);
        //rate = comp (temp,data);
        
       // rate = (rate * 100)/data.at(0).size() ;

        // return rate;
}


//function to pass in the values
void leave_one_out_cross_validation(vector<vector<float> > dat, int fea,vector<float> cor,int inpu){

        vector<float>featureline;
        float accurate; 
        vector<float>set;
        //for (int m = 0; m < dat.size(); m++){
           kfold_cross_validation(dat,fea,cor,inpu);
        //}
       // cout << "accuracy = " << accurate << endl;

}

//in This function I made the 2 d array from this function and returned 2d vector from this function. 
//This way im able to loop through each class in the 2 d array and each feature
vector<vector<float> > seperate(vector<float> x){
    vector<vector<float> > v;
    vector<float> temp;
    int i = 0;
    while( i < x.size()){
        if (i == 0){
            temp.push_back(x.at(i));
            //cout << "i " << i;
            i++;
        }
        else if (x.at(i) == 1){
            //printfloat(temp);
            v.push_back(temp);
            
            temp.clear();
            temp.push_back(x.at(i));
            //cout << "i " << i;
            i++;
        }
        else if (x.at(i) == 2){
            //printfloat(temp);
            v.push_back(temp);
            temp.clear();
            temp.push_back(x.at(i));
            //cout << "i " << i;
            i++;
        }
        else{
           temp.push_back(x.at(i));
           //cout << "i " << i;
           i++;
        }
    }
    cout << "------------" << endl;
    //printfloat(temp);
    v.push_back(temp);
    return v;
}

//test function to see if the classes were right
int fe(vector<float>b){
    int c = 0;
    for (int i = 1; i < b.size(); i++){
        if (b.at(i) == 1 || b.at(i) == 2){
            return c;
        }
        else{
            c = c + 1;
        }
    }
    return 0;
}
int main()
{
    //rows will be for instances
    //features are the amount after the class 1,2
    string userinput;
    vector<float> vals;
    vector<vector<float> > vec; 
    int size;
    int feat;
    //cout << "Selection Algorithm for nearest neighbor" << endl;
    cout << "Enter the text file for search" << endl;
    cin >> userinput;

    cout << "this is the current text file being looked at " << userinput << endl;
    
    ifstream read; //reading from the files
    
    read.open(userinput.c_str());
    

    //reading the userinput and pushing back the vals
    if (read.fail()){
        cout << "here, file failed to open" << endl;
    }
    else{

    
        string line;
        //for seperating maybe try two vectors
        while (getline(read,line)){ //reads in the line
                //use float for floating numbers and stringstream for reading in line by line inputs
                float val;
                stringstream s(line); //seperate the vals from each other
                while(s >> val){ //store individual values
                    if (val == 2){
                        //cout << "float val = 2" << endl;
                    }
                    else if (val == 1){
                        //cout << "float val = 1" << endl;
                    }
                    vals.push_back(val);
                    //cout << "val size = " << vals.size() << endl;
                  
                }
                
                //vec.push_back(vals);
                size = size + 1;
        }
    }
    read.close();

    //


    //cout << vals.size() << endl;
    //feat = vec.front().size()-1;
    feat = fe(vals);


    //printfloat(vals);
    cout << "features = " << feat << endl;
    cout << "size = " << size << endl;
    cout << "vals size = " << vals.size() << endl;
    //cout << "vec size = " << vec.size() << endl;
    
    cout << "-------------------------------------------------" << endl;
    int fsize = feat + 1;
    //kfold_cross_validation(vec);
    
    //setting the 2d array from the vals
    vec = seperate(vals);

    //cout << "vec size = " << vec.size() << endl;



    int rows = vec.size();

    
    //featuresearch(vec,fsize);
    //cout << vec.at(4).at(0) << endl;
    //cout << vec.at(0).at(0) << endl;
    //float testing = nearestneighbor(vec,feat);
    vector<float> test = correct(vec);
    //printfloat(test);
    //cout << "testing : " << kfold_cross_validation(vec,feat,test) << endl;
    // vector<float> test = correct(vec);
    // printfloat(test);
    cout << endl << endl << endl<< endl;


    //choosing the algorithm for the features.
    cout << "Selection Algorithm for nearest neighbor" << endl;
    int in;
    cin >> in;
    if (in == 1){
        clock_t beg = clock();
        cout << "forward selection" << endl;
        leave_one_out_cross_validation(vec,feat,test,in);
        clock_t en = clock();

        double t = double(en-beg)/CLOCKS_PER_SEC;

        cout << "time in secs for this function was " << setprecision(3) << t << " secs" <<endl;
       // cout << 20/4 << endl;
    }

     else if (in == 2){
         cout << "backward elimination" << endl;
         leave_one_out_cross_validation(vec,feat,test,in);
     }

    return 0;
}


//this is the test of doing the backwards feature
pair<vector<int>,double > bn(vector<vector<float> > data, int features,vector<float>correct,vector<int>featureset,vector<int>best,double highest,int looking){
    
    vector<float>check;

    float val = 0; //nearest neighbor distance     
    val = numeric_limits<float>::infinity();
    float euclidean;     

    int featureline;
    int i = 1;
    int arr = 0;

    int last = 0;

    double currhighestval = 0;
    double ratechecker = 0;
    int highclassval = 0;


    //outer loop to run through the loop each feature
    while (i < data.size()){


        if (looking == i){
            cout << "emitted " << looking << endl;
            i++;
        }
        else{







        // if(find(featureset.begin(), featureset.end(),i) != featureset.end()){
        //     cout << "feature already added" << endl;
        //     cout << "here" << endl;
        //     i++;
        // }
        
       // else{
             
        check.clear();
    
        for (int loop = 0; loop < data.size(); loop++){
        
        euclidean = 0;

        //choose feature to exclude

        float temp = data.at(loop).at(i);

        //cout << "temp val " << temp << endl;

        int spot = 0;
        int featurespot = 0;
        int positionfound = 0;
            while(spot < data.size()){
                euclidean = 0;
                featureline = 1;
                //cout << featureline << endl;
                float value = data.at(spot).at(i);
           
               if (value == temp){
                //cout << "same values" << endl;
               }
               else{
                euclidean = euclidean + pow(data.at(spot).at(i) - temp,2);
                cout << "euclidean value = " << euclidean << endl;
                //cout << "spot = " << spot << endl;
                if(euclidean < val && value != temp){
                val = euclidean;
                positionfound = spot;
                

            }
               }
                arr++;
                spot++;
               
        }
        

        cout << "curr val = " << val << endl;
        cout << "position val = " << positionfound << endl;

        float classdesc;
        classdesc = data.at(positionfound).at(0);
        
        cout << "classdesc = " << classdesc << endl;
        check.push_back(classdesc);
        float compare = val; 
        //cout << "value to compare = " << compare << endl;
        arr = 0;
        featureline++;
        val = numeric_limits<float>::infinity();

    }

    double rate = 0;
    // for (int a = 0; a < check.size(); a++){
    //         cout << check.at(a) << " ";
    //     }
        //cout << endl;

    // for (int a = 0; a < correct.size(); a++){
    //         cout << correct.at(a) << " ";
    //     }
    //     cout << endl;

    double v = 0;
     for(int b = 0; b < correct.size(); b++){
         if (correct.at(b) == check.at(b)){
             v = v + 1;
       
         }
     }

    rate = v;
    rate = (rate * 100)/data.at(0).size();
    cout << "rate = " << rate  << "%"<< endl;
    
    if(ratechecker <= rate){
        ratechecker = rate;
        highclassval = i;
    }
    cout << "feature " << highclassval << endl;


    cout << "====================================================" << endl;
    i++;

      }
    }

        cout << "highclassval " << highclassval << endl;


        if(find(featureset.begin(), featureset.end(),highclassval) != featureset.end()){
            cout << "feature already exists in the set of values" << endl;
        }
        
        else{
            featureset.push_back(highclassval);
            for (int y = 0; y < featureset.size(); y++)
            cout << featureset.at(y) << " ";

            cout << endl;
        }
        
     if(highest > ratechecker){
         cout << "accuracy lowered" << endl;
     }

     else{
        highest = ratechecker;
    return make_pair(featureset,highest);
    }

    return make_pair(featureset,highest);

}   